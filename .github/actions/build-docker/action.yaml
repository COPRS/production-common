name: 'Build Core and Docker'
description: 'Build core services and docker image and generate reports'
inputs:
  COMPONENT:
    required: true
  WERUM_ARTIFACTORY_USER:
    required: true
  WERUM_ARTIFACTORY_PASSWORD:
    required: true
  SONARQUBE_HOST:
    required: true
  SONARQUBE_TOKEN:
    required: true

runs:
  using: "composite"
  steps:
  
  - name: Extract image tag name
    shell: bash
    run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF} | rev | cut -d / -f 1 | rev)"
    id: extract_branch
      
  - name: Set up JDK 8
    uses: actions/setup-java@v2
    with:
      java-version: '8'
      distribution: 'adopt'
  
  - name: Setup Maven settings.xml
    uses: whelk-io/maven-settings-xml-action@v11
    with:
      repositories: '[{ "id": "artifactory", "url": "https://${{ env.ARTIFACTORY_BASE }}/artifactory/${{ env.ARTIFACTORY_PROJECT_MAVEN }}" }]'
      servers: '[{"id": "artifactory","username": "${{ inputs.WERUM_ARTIFACTORY_USER }}", "password": "${{ inputs.WERUM_ARTIFACTORY_PASSWORD }}"}]'
   
  - name: Build jar 
    shell: bash
    run: |
      cd rs-core/${{ inputs.COMPONENT }}
      mvn spring-boot:build-image -Dspring-boot.build-image.imageName=${{ env.ARTIFACTORY_BASE }}/${{ env.ARTIFACTORY_PROJECT_DOCKER }}/${{ env.IMAGE_NAME }}-${{ inputs.COMPONENT }}
      
  - name: Sonarqube scan 
    shell: bash
    run: |
      cd rs-core/${{ inputs.COMPONENT }}
      mvn sonar:sonar -Dsonar.projectKey=${{github.repository}} -Dsonar.host.url=${{ inputs.SONARQUBE_HOST }} -Dsonar.login=${{ inputs.SONARQUBE_TOKEN }} -Dsonar.branch.name=${{ steps.extract_branch.outputs.branch }}

  - name: Login to Artifcactory
    uses: docker/login-action@v1
    with:
      registry: ${{ env.ARTIFACTORY_BASE }}/${{ env.ARTIFACTORY_PROJECT_DOCKER }}
      username: ${{ inputs.WERUM_ARTIFACTORY_USER }}
      password: ${{ inputs.WERUM_ARTIFACTORY_PASSWORD }}

  - name: Extract Docker metadata
    id: meta
    uses: docker/metadata-action@v3
    with:
      images: ${{ env.ARTIFACTORY_BASE }}/${{ env.ARTIFACTORY_PROJECT_DOCKER }}/${{ env.IMAGE_NAME }}-${{ inputs.COMPONENT }}
        
  - name: Scan image
    uses: anchore/scan-action@v2
    id: scan
    with:
      image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
      acs-report-enable: true
      fail-build: false
      severity-cutoff: critical

  - name: Upload Anchore scan json report
    uses: actions/upload-artifact@master
    with:
      name: vulnerabilities-${{ inputs.COMPONENT }}
      path: ${{ steps.scan.outputs.vulnerabilities }}

  - name: Push image
    shell: bash
    run: |
      docker push ${{ fromJSON(steps.meta.outputs.json).tags[0] }};
