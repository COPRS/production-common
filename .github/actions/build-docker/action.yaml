# Copyright 2023 Airbus
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Build Core and Docker'
description: 'Build core services and docker image and generate reports'
inputs:
  COMPONENT:
    description: ''
    required: true
  WERUM_ARTIFACTORY_USER:
    description: ''
    required: true
  WERUM_ARTIFACTORY_PASSWORD:
    description: ''
    required: true
  SONARQUBE_HOST:
    description: ''
    required: true
  SONARQUBE_TOKEN:
    description: ''
    required: true

runs:
  using: "composite"
  steps:
  
  - name: Extract image tag name
    shell: bash
    run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF} | cut -d / -f3-)"
    id: extract_branch
      
  - name: Set up JDK 11
    uses: actions/setup-java@v2
    with:
      java-version: '11'
      distribution: 'adopt'
  
  - name: Setup Maven settings.xml
    uses: whelk-io/maven-settings-xml-action@v11
    with:
      repositories: '[{ "id": "artifactory", "url": "https://${{ env.ARTIFACTORY_BASE }}/artifactory/${{ env.ARTIFACTORY_PROJECT_MAVEN }}" }]'
      servers: '[{"id": "artifactory","username": "${{ inputs.WERUM_ARTIFACTORY_USER }}", "password": "${{ inputs.WERUM_ARTIFACTORY_PASSWORD }}"}]'
   
  - name: Build jar 
    shell: bash
    run: |
      cd rs-core/${{ inputs.COMPONENT }}
      mvn clean install
      
  - name: Sonarqube scan 
    shell: bash
    run: |
      cd rs-core/${{ inputs.COMPONENT }}
      mvn sonar:sonar -Dsonar.projectKey=${{ inputs.COMPONENT }} -Dsonar.host.url=${{ inputs.SONARQUBE_HOST }} -Dsonar.login=${{ inputs.SONARQUBE_TOKEN }} -Dsonar.branch.name=${{ steps.extract_branch.outputs.branch }}

  - name: Login to Artifactory
    uses: docker/login-action@v1
    with:
      registry: ${{ env.ARTIFACTORY_BASE }}/${{ env.ARTIFACTORY_PROJECT_DOCKER }}
      username: ${{ inputs.WERUM_ARTIFACTORY_USER }}
      password: ${{ inputs.WERUM_ARTIFACTORY_PASSWORD }}

  - name: Extract Docker metadata
    id: meta
    uses: docker/metadata-action@v3
    with:
      images: ${{ env.ARTIFACTORY_BASE }}/${{ env.ARTIFACTORY_PROJECT_DOCKER }}/${{ env.IMAGE_NAME }}-${{ inputs.COMPONENT }}

  - name: Build image
    uses: docker/build-push-action@v2
    with:
      load: true
      context: ./rs-core/${{ inputs.COMPONENT }}
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      build-args: |
        BRANCH=${{ steps.extract_branch.outputs.branch }}
        BRANCH_TEXT=${{ steps.extract_branch.outputs.branch }}
        VERSION=${{ env.VERSION }}
        COMMIT_ID=${{ env.COMMIT_ID }}
        
  - name: Scan image
    uses: anchore/scan-action@v2
    id: scan
    with:
      image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
      acs-report-enable: true
      fail-build: false
      severity-cutoff: critical

  - name: Upload Anchore scan json report
    uses: actions/upload-artifact@v4
    with:
      name: vulnerabilities-${{ inputs.COMPONENT }}
      path: ${{ steps.scan.outputs.vulnerabilities }}

  - name: Push image
    shell: bash
    run: |
      docker push ${{ fromJSON(steps.meta.outputs.json).tags[0] }};
