name: Build RS-Core

on: 
  push:
    paths:
      - 'rs-core/**'
      - 'rs-libs/**'
      - '.github/workflows/build-ci.yaml'
      - '.github/actions/**'
    branches:
      - '!main'
      - 'release/**'
      - 'develop**'
  workflow_dispatch:

env:
  IMAGE_NAME: rs-core
  VERSION: 3.32.1
  COMMIT_ID: ${{ github.sha }}
  ARTIFACTORY_BASE: artifactory.coprs.esa-copernicus.eu
  ARTIFACTORY_PROJECT_DOCKER: werum-docker
  ARTIFACTORY_PROJECT_MAVEN: rs-maven

jobs:   
  lib-changes:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.filter.outputs.changes }}
    steps:
    - name: Extract branch or tag name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF} | rev | cut -d / -f 1 | rev)"
      id: extract_branch
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        base: ${{ steps.extract_branch.outputs.branch }}
        filters: |
          lib-commons:
            - 'rs-libs/lib-commons/**'
            - 'rs-libs/pom.xml'
          app-status: 
            - 'rs-libs/app-status/**'
            - 'rs-libs/pom.xml'
          message-adapter: 
            - 'rs-libs/message-adapter/**'
            - 'rs-libs/pom.xml'
          xml-tools: 
            - 'rs-libs/xml-tools/**'
            - 'rs-libs/pom.xml'
          error-repo-client: 
            - 'rs-libs/error-repo-client/**'
            - 'rs-libs/pom.xml'
          app-catalog-client: 
            - 'rs-libs/app-catalog-client/**'
            - 'rs-libs/pom.xml'
          obs-sdk: 
            - 'rs-libs/obs-sdk/**'
            - 'rs-libs/pom.xml'
          mqi-client: 
            - 'rs-libs/mqi-client/**'
            - 'rs-libs/pom.xml'
          metadata-client: 
            - 'rs-libs/metadata-client/**'
            - 'rs-libs/pom.xml'
          prip-client: 
            - 'rs-libs/prip-client/**'
            - 'rs-libs/pom.xml'
          auxip-client: 
            - 'rs-libs/auxip-client/**'
            - 'rs-libs/pom.xml'
          xbip-client: 
            - 'rs-libs/xbip-client/**'
            - 'rs-libs/pom.xml'
          edip-client: 
            - 'rs-libs/edip-client/**'
            - 'rs-libs/pom.xml'
          data-lifecycle-client: 
            - 'rs-libs/data-lifecycle-client/**'
            - 'rs-libs/pom.xml'
          jacoco-report: 
            - 'rs-libs/jacoco-report/**'
            - 'rs-libs/pom.xml'
          
  core-changes:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.filter.outputs.changes }}
    steps:
    - name: Extract branch or tag name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF} | rev | cut -d / -f 1 | rev)"
      id: extract_branch
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        base: ${{ steps.extract_branch.outputs.branch }}
        filters: |
          archives: 
            - 'rs-core/archives/**'
            - 'rs-core/pom.xml'
          compression-trigger: 
            - 'rs-core/compression-trigger/**'
            - 'rs-core/pom.xml'
          compression-worker: 
            - 'rs-core/compression-worker/**'
            - 'rs-core/pom.xml'
          data-lifecycle-trigger: 
            - 'rs-core/data-lifecycle-trigger/**'
            - 'rs-core/pom.xml'
          data-request-worker: 
            - 'rs-core/data-request-worker/**'
            - 'rs-core/pom.xml'
          ddip-frontend: 
            - 'rs-core/ddip-frontend/**'
            - 'rs-core/pom.xml'
          dissemination-trigger: 
            - 'rs-core/dissemination-trigger/**'
            - 'rs-core/pom.xml'
          dissemination-worker: 
            - 'rs-core/dissemination-worker/**'
            - 'rs-core/pom.xml'
          disseminator: 
            - 'rs-core/disseminator/**'
            - 'rs-core/pom.xml'
          eviction-management-worker: 
            - 'rs-core/eviction-management-worker/**'
            - 'rs-core/pom.xml'
          ingestion-filter: 
            - 'rs-core/ingestion-filter/**'
            - 'rs-core/pom.xml'
          ingestion-trigger: 
            - 'rs-core/ingestion-trigger/**'
            - 'rs-core/pom.xml'
          ingestion-worker: 
            - 'rs-core/ingestion-worker/**'
            - 'rs-core/pom.xml'
          ipf-execution-worker: 
            - 'rs-core/ipf-execution-worker/**'
            - 'rs-core/pom.xml'
          ipf-preparation-worker: 
            - 'rs-core/ipf-preparation-worker/**'
            - 'rs-core/pom.xml'
          metadata-catalog-extraction: 
            - 'rs-core/metadata-catalog-extraction/**'
            - 'rs-core/pom.xml'
          metadata-catalog-timer: 
            - 'rs-core/metadata-catalog-timer/**'
            - 'rs-core/pom.xml'
          metadata-catalog-filter: 
            - 'rs-core/metadata-catalog-filter/**'
            - 'rs-core/pom.xml'
          metadata-catalog-searchcontroller: 
            - 'rs-core/metadata-catalog-searchcontroller/**'
            - 'rs-core/pom.xml'
          native-api: 
            - 'rs-core/native-api/**'
            - 'rs-core/pom.xml'
          on-demand-interface-provider: 
            - 'rs-core/on-demand-interface-provider/**'
            - 'rs-core/pom.xml'
          prip-frontend: 
            - 'rs-core/prip-frontend/**'
            - 'rs-core/pom.xml'
          prip-trigger: 
            - 'rs-core/prip-trigger/**'
            - 'rs-core/pom.xml'
          prip-worker: 
            - 'rs-core/prip-worker/**'
            - 'rs-core/pom.xml'
          production-trigger: 
            - 'rs-core/production-trigger/**'
            - 'rs-core/pom.xml'
          request-repository: 
            - 'rs-core/request-repository/**'
            - 'rs-core/pom.xml'
          validation: 
            - 'rs-core/validation/**'
            - 'rs-core/pom.xml'
          
  exec-worker-changes:
    runs-on: ubuntu-latest
    outputs:
      exec-worker: ${{ steps.filter.outputs.exec-worker }}
    steps:
    - name: Extract branch or tag name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF} | rev | cut -d / -f 1 | rev)"
      id: extract_branch
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        base: ${{ steps.extract_branch.outputs.branch }}
        filters: |
          exec-worker:
            - 'rs-core/ipf-execution-worker/**'
            - 'rs-libs/obs-sdk/**'
            - 'rs-libs/lib-commons/**'
            - 'rs-libs/app-status/**'
            - 'rs-libs/mqi-client/**'
            - 'rs-libs/metadata-client/**'
          
  gg-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: GitGuardian scan
      uses: GitGuardian/gg-shield-action@master
      env:
        GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
        GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
        GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
        GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }} 
          
  build-libs:
    needs: [lib-changes, gg-scan]
    if: ${{ needs.lib-changes.outputs.packages != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        component: ${{ fromJSON(needs.lib-changes.outputs.packages) }}
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/build-libs
      with:
        COMPONENT: ${{ matrix.component }}
        WERUM_ARTIFACTORY_USER: ${{ secrets.WERUM_ARTIFACTORY_USER }}
        WERUM_ARTIFACTORY_PASSWORD: ${{ secrets.WERUM_ARTIFACTORY_PASSWORD }}
        SONARQUBE_HOST: ${{ secrets.SONARQUBE_HOST }}
        SONARQUBE_TOKEN: ${{ secrets.WERUM_SONARQUBE_TOKEN }}
    
  build-core:
    needs: [lib-changes, core-changes, gg-scan]
    if: ${{ needs.lib-changes.outputs.packages == '[]' && needs.core-changes.outputs.packages != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJSON(needs.core-changes.outputs.packages) }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/build-docker
      with:
        COMPONENT: ${{ matrix.component }}
        WERUM_ARTIFACTORY_USER: ${{ secrets.WERUM_ARTIFACTORY_USER }}
        WERUM_ARTIFACTORY_PASSWORD: ${{ secrets.WERUM_ARTIFACTORY_PASSWORD }}
        SONARQUBE_HOST: ${{ secrets.SONARQUBE_HOST }}
        SONARQUBE_TOKEN: ${{ secrets.WERUM_SONARQUBE_TOKEN }}
    - uses: ./.github/actions/generate-report
      with:
        COMPONENT: ${{ matrix.component }}

  build-all-core:
    needs: [lib-changes, build-libs]
    if: ${{ needs.lib-changes.outputs.packages != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        component: [applicative-catalog, archives, disseminator, request-repository, ingestion-trigger, ingestion-filter, ingestion-worker, production-trigger, ipf-preparation-worker, ipf-execution-worker, on-demand-interface-provider, metadata-catalog-timer, metadata-catalog-filter, metadata-catalog-extraction, metadata-catalog-searchcontroller, mqi-server, queue-watcher, validation, compression-trigger, compression-worker, prip-trigger, prip-worker, prip-frontend, data-lifecycle-trigger, data-request-worker, eviction-management-worker, dissemination-trigger, dissemination-worker, directory-cleaner, native-api, ddip-frontend]           
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/build-docker
      with:
        COMPONENT: ${{ matrix.component }}
        WERUM_ARTIFACTORY_USER: ${{ secrets.WERUM_ARTIFACTORY_USER }}
        WERUM_ARTIFACTORY_PASSWORD: ${{ secrets.WERUM_ARTIFACTORY_PASSWORD }}
        SONARQUBE_HOST: ${{ secrets.SONARQUBE_HOST }}
        SONARQUBE_TOKEN: ${{ secrets.WERUM_SONARQUBE_TOKEN }}
    - uses: ./.github/actions/generate-report
      with:
        COMPONENT: ${{ matrix.component }}

  # If the execution-worker-jar is updated also update the ACQ simulator docker image
  build-acq-simulator:
    needs: [exec-worker-changes, build-core, build-all-core]
    if: ${{ always() && needs.exec-worker-changes.outputs.exec-worker == 'true' && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) }}
    uses: coprs/production-common/.github/workflows/build-acqsimulator.yaml@develop
    secrets:
      WERUM_ARTIFACTORY_USER: ${{ secrets.WERUM_ARTIFACTORY_USER }}
      WERUM_ARTIFACTORY_PASSWORD: ${{ secrets.WERUM_ARTIFACTORY_PASSWORD }}
      GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  # If the execution-worker-jar is updated also update the S1 IPF Simulator image
  build-s1-ipf-simulator:
    needs: [exec-worker-changes, build-core, build-all-core]
    if: ${{ always() && needs.exec-worker-changes.outputs.exec-worker == 'true' && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) }}
    uses: coprs/production-common/.github/workflows/build-s1-ipf-simulator.yaml@develop
    secrets:
      WERUM_ARTIFACTORY_USER: ${{ secrets.WERUM_ARTIFACTORY_USER }}
      WERUM_ARTIFACTORY_PASSWORD: ${{ secrets.WERUM_ARTIFACTORY_PASSWORD }}
      GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
 
  # If the execution-worker-jar is updated also update the S3 IPF AIO image    
#  build-ipf-s1-aio:
#    needs: build-core
#    if: ${{ inputs.exec-worker }}
#    uses: coprs/production-common/.github/workflows/build-ipf-s1-aio.yaml@develop-build
#    secrets:
#      WERUM_ARTIFACTORY_USER: ${{ secrets.WERUM_ARTIFACTORY_USER }}
#      WERUM_ARTIFACTORY_PASSWORD: ${{ secrets.WERUM_ARTIFACTORY_PASSWORD }}
#      GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
      
