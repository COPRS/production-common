name: Build RS-Core

on: 
  push:
    paths:
      - 'rs-core/**'
      - 'rs-libs/**'
      - '.github/workflows/build-ci.yaml'
      - '.github/workflows/build-docker.yaml'
  workflow_dispatch:

env:
  # github.repository as <account>/<repo>
  IMAGE_NAME: rs-core
  VERSION: 3.32.1
  COMMIT_ID: ${{ github.sha }}
  ARTIFACTORY_BASE: artifactory.coprs.esa-copernicus.eu
  ARTIFACTORY_PROJECT_DOCKER: werum-docker
  ARTIFACTORY_PROJECT_MAVEN: rs-maven

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      libs: ${{ steps.filter.outputs.libs }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          libs:
            - 'rs-libs/**'
            
  lib-changes:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.filter.outputs.changes }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          lib-commons: 'rs-libs/lib-commons/**'
          app-status: 'rs-libs/app-status/**'
          error-repo-client: 'rs-libs/error-repo-client/**'
          xml-tools: 'rs-libs/xml-tools/**'
          message-adapter: 'rs-libs/message-adapter/**'
          app-catalog-client: 'rs-libs/app-catalog-client/**'
          obs-sdk: 'rs-libs/obs-sdk/**'
          mqi-client: 'rs-libs/mqi-client/**'
          metadata-client: 'rs-libs/metadata-client/**'
          prip-client: 'rs-libs/prip-client/**'
          auxip-client: 'rs-libs/auxip-client/**'
          xbip-client: 'rs-libs/xbip-client/**'
          edip-client: 'rs-libs/edip-client/**'
          data-lifecycle-client: 'rs-libs/data-lifecycle-client/**'
          jacoco-report: 'rs-libs/jacoco-report/**'
          
  core-changes:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.filter.outputs.changes }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          applicative-catalog: 'rs-core/applicative-catalog/**'
          archives: 'rs-core/archives/**'
          compression-trigger: 'rs-core/compression-trigger/**'
          compression-worker: 'rs-core/compression-worker/**'
          data-lifecycle-trigger: 'rs-core/data-lifecycle-trigger/**'
          data-request-worker: 'rs-core/data-request-worker/**'
          ddip-frontend: 'rs-core/ddip-frontend/**'
          directory-cleaner: 'rs-core/directory-cleaner/**'
          dissemination-trigger: 'rs-core/dissemination-trigger/**'
          dissemination-worker: 'rs-core/dissemination-worker/**'
          disseminator: 'rs-core/disseminator/**'
          eviction-management-worker: 'rs-core/eviction-management-worker/**'
          ingestion-filter: 'rs-core/ingestion-filter/**'
          ingestion-trigger: 'rs-core/ingestion-trigger/**'
          ingestion-worker: 'rs-core/ingestion-worker/**'
          ipf-execution-worker: 'rs-core/ipf-execution-worker/**'
          ipf-preparation-worker: 'rs-core/ipf-preparation-worker/**'
          metadata-catalog-timer: 'rs-core/metadata-catalog-timer/**'
          metadata-catalog-trigger: 'rs-core/metadata-catalog-trigger/**'
          metadata-catalog-worker: 'rs-core/metadata-catalog-worker/**'
          mqi-server: 'rs-core/mqi-server/**'
          native-api: 'rs-core/native-api/**'
          on-demand-interface-provider: 'rs-core/on-demand-interface-provider/**'
          prip-frontend: 'rs-core/prip-frontend/**'
          prip-trigger: 'rs-core/prip-trigger/**'
          prip-worker: 'rs-core/prip-worker/**'
          production-trigger: 'rs-core/production-trigger/**'
          queue-watcher: 'rs-core/queue-watcher/**'
          request-repository: 'rs-core/request-repository/**'
          validation: 'rs-core/validation/**'
          
  gg-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: GitGuardian scan
      uses: GitGuardian/gg-shield-action@master
      env:
        GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
        GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
        GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
        GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }} 
          
  build-libs:
    needs: [lib-changes, gg-scan]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: ${{ fromJSON(needs.lib-changes.outputs.packages) }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    - name: Set environment variables
      shell: bash
      run: |
        # Short name for current branch. For PRs, use target branch (base ref)
        GIT_BRANCH=${GITHUB_BASE_REF:-${GITHUB_REF/refs/heads/}}
        echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV
        
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'adopt'
     
    - name: Build jar 
      shell: bash
      run: |
        cd rs-libs/${{matrix.component}}
        mvn clean install
        
    - name: sonarqube scan 
      shell: bash
      run: |
        cd rs-libs/${{matrix.component}}
        mvn sonar:sonar -Dsonar.projectKey=${{github.repository}} -Dsonar.host.url=${{ secrets.SONARQUBE_HOST }} -Dsonar.login=${{ secrets.WERUM_SONARQUBE_TOKEN }} -Dsonar.branch.name=${{ env.GIT_BRANCH }}
        
    - name: Setup Maven settings.xml
      uses: whelk-io/maven-settings-xml-action@v11
      with:
        servers: '[{"id": "artifactory","username": "${{ secrets.WERUM_ARTIFACTORY_USER }}", "password": "${{ secrets.WERUM_ARTIFACTORY_PASSWORD }}"}]'
      
    - name: Push to Artifactory
      shell: bash
      run: |
        cd rs-libs/${{matrix.component}}
        mvn jar:jar deploy:deploy -Dfile=target/*.jar -DrepositoryId=artifactory -DpomFile=pom.xml -DaltDeploymentRepository=artifactory::default::https://${{ env.ARTIFACTORY_BASE }}/artifactory/${{ env.ARTIFACTORY_PROJECT_MAVEN }}
     
  build-all-core:
    needs: [changes, build-libs]
    if: ${{ needs.changes.outputs.libs == 'true' }}
    strategy:
      matrix:
        component: [applicative-catalog, archives, disseminator, request-repository, ingestion-trigger, ingestion-filter, ingestion-worker, production-trigger, ipf-preparation-worker, ipf-execution-worker, on-demand-interface-provider, metadata-catalog-timer, metadata-catalog-trigger, metadata-catalog-worker, mqi-server, queue-watcher, validation, compression-trigger, compression-worker, prip-trigger, prip-worker, prip-frontend, data-lifecycle-trigger, data-request-worker, eviction-management-worker, dissemination-trigger, dissemination-worker, directory-cleaner, native-api, ddip-frontend]           
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
      
    - uses: ./.github/actions/build-docker
      with:
        COMPONENT: ${{ matrix.component }}
        ARTIFACTORY_BASE: ${{ env.ARTIFACTORY_BASE}}
        ARTIFACTORY_PROJECT: ${{ env.ARTIFACTORY_PROJECT_DOCKER}}
        WERUM_ARTIFACTORY_USER: ${{ secrets.WERUM_ARTIFACTORY_USER }}
        WERUM_ARTIFACTORY_PASSWORD: ${{ secrets.WERUM_ARTIFACTORY_PASSWORD }}
        SONARQUBE_HOST: ${{ secrets.SONARQUBE_HOST }}
        SONARQUBE_TOKEN: ${{ secrets.WERUM_SONARQUBE_TOKEN }}
        IMAGE_NAME: ${{ env.IMAGE_NAME }}
        VERSION: ${{ env.VERSION }}
        COMMIT_ID: ${{ env.COMMIT_ID}}
    
  build-core:
    needs: [changes, core-changes, gg-scan]
    if: ${{ needs.changes.outputs.libs == 'false' }}
    strategy:
      matrix:
        component: ${{ fromJSON(needs.core-changes.outputs.packages) }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
      
    - uses: ./.github/actions/build-docker
      with:
        COMPONENT: ${{ matrix.component }}
        ARTIFACTORY_BASE: ${{ env.ARTIFACTORY_BASE}}
        ARTIFACTORY_PROJECT: ${{ env.ARTIFACTORY_PROJECT_DOCKER}}
        WERUM_ARTIFACTORY_USER: ${{ secrets.WERUM_ARTIFACTORY_USER }}
        WERUM_ARTIFACTORY_PASSWORD: ${{ secrets.WERUM_ARTIFACTORY_PASSWORD }}
        SONARQUBE_HOST: ${{ secrets.SONARQUBE_HOST }}
        SONARQUBE_TOKEN: ${{ secrets.WERUM_SONARQUBE_TOKEN }}
        IMAGE_NAME: ${{ env.IMAGE_NAME }}
        VERSION: ${{ env.VERSION }}
        COMMIT_ID: ${{ env.COMMIT_ID}}
       

#  # If the execution-worker-jar is updated also update the ACQ simulator docker image
#  build-acq-simulator:
#    needs: build-core
#    if: ${{ inputs.exec-worker }}
#    uses: coprs/production-common/.github/workflows/build-acqsimulator.yaml@develop-build
#    secrets:
#      WERUM_ARTIFACTORY_USER: ${{ secrets.WERUM_ARTIFACTORY_USER }}
#      WERUM_ARTIFACTORY_PASSWORD: ${{ secrets.WERUM_ARTIFACTORY_PASSWORD }}
#      GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

#  # If the execution-worker-jar is updated also update the S1 IPF Simulator image
#  build-s1-ipf-simulator:
#    needs: build-core
#    if: ${{ inputs.exec-worker }}
#    uses: coprs/production-common/.github/workflows/build-s1-ipf-simulator.yaml@develop-build
#    secrets:
#      WERUM_ARTIFACTORY_USER: ${{ secrets.WERUM_ARTIFACTORY_USER }}
#      WERUM_ARTIFACTORY_PASSWORD: ${{ secrets.WERUM_ARTIFACTORY_PASSWORD }}
#      GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
 
#  # If the execution-worker-jar is updated also update the S1 IPF AIO image    
#  build-ipf-s1-aio:
#    needs: build-core
#    if: ${{ inputs.exec-worker }}
#    uses: coprs/production-common/.github/workflows/build-ipf-s1-aio.yaml@develop-build
#    secrets:
#      WERUM_ARTIFACTORY_USER: ${{ secrets.WERUM_ARTIFACTORY_USER }}
#      WERUM_ARTIFACTORY_PASSWORD: ${{ secrets.WERUM_ARTIFACTORY_PASSWORD }}
#      GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
      