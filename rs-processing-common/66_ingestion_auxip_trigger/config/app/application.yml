#TODO: figure out why I need this here and in bootstrap.yml 
spring:
  main:
    # Enable or disable spring boot banner on application startup
    banner-mode: "off"
  application:
    # Application name
    name: s1pdgs-ingestion-auxip-trigger

# Logging
logging:
  # Path to log configuration file
  config: ${log4j_config:log/log4j2.yml}

process:
  # Hostname
  hostname: ${HOSTNAME}                                         

# Ingestion trigger
ingestion-trigger:
  # Maximum number of consecutive retries for publishing of ingestion jobs (defaults to 10)
  publish-max-retries: {{if .Values.auxip }}{{.Values.auxip.publishMaxRetries | default "10" }}{{else}} 10 {{end}}
  # Time between retries after unsuccessful publishing of ingestion jobs in millis (defaults to 10000)
  publish-tempo-retry-ms: {{if .Values.auxip }}{{.Values.auxip.publishTempoRetryMs | default "10000" }}{{else}} 10000 {{end}}
  # Pickup point polling interval in millis
  polling-interval-ms: 10000
  
  polling:
    # Handling of Auxiliaries
      # product provider URL (PRIP)
    - directory: "{{ .Values.auxip.serviceRootUri }}/"
      # possible type values: prip
      type: prip
      # Filename regex for matching files
      matchRegex: ^S1.*(AUX_|AMH_|AMV_|MPL_).*$
      # Filename regex for ignoring files
      ignoreRegex: (^\..*|.*\.tmp$|db.*|^lost\+found$)
      # Kafka topic to put the ingestion jobs for the worker
      topic: t-pdgs-ingestion-jobs-auxip-nominal
      # Product family accociated with the file to be ingested
      family: AUXILIARY_FILE_ZIP
      # Name of the station (4-letter code)
      stationName: PRIP
      # Mission-ID in upper case (S1,S2,S3..)
      missionId: S1
    # Handling of Plans and Reports (zipped)
      # product provider URL (PRIP)
    - directory: "{{ .Values.auxip.serviceRootUri }}/"
      # possible type values: prip
      type: prip
      # Filename regex for matching files
      matchRegex: ^S1.*(_OPER_REP_MP_MP__PDMC_|_OPER_REP__SUP___|_OPER_MPL_SP.{4}_PDMC_|_OPER_REP_STNACQ_.{4}_|_OPER_REP_STNUNV_.{4}_|_OPER_AM[VH_]_FAILUR_MPC__|_OPER_REP__MACP__).*\.(zip|ZIP)$
      # Filename regex for ignoring files
      ignoreRegex: (^\..*|.*\.tmp$|db.*|^lost\+found$)
      # Kafka topic to put the ingestion jobs for the worker
      topic: t-pdgs-ingestion-jobs-auxip-nominal
      # Product family accociated with the file to be ingested
      family: PLAN_AND_REPORT_ZIP
      # Name of the station (4-letter code)
      stationName: PRIP
      # Mission-ID in upper case (S1,S2,S3..)
      missionId: S1
    # Handling of S3 AUX files
      # product provider URL (PRIP)
    - directory: "{{ .Values.auxip.serviceRootUri }}/"
      # possible type values: prip
      type: prip
      # Filename regex for matching files
      matchRegex: ^S3[AB_]_([0-9a-zA-Z_]{9})AX_([0-9]{8}T[0-9]{6})_([0-9]{8}T[0-9]{6})_([0-9]{8}T[0-9]{6})_(_{17})_([0-9a-zA-Z_]{3})_(((O|F|R|D|_)_(NR|NT|ST|SN|NS|NN|AL|__)_([a-zA-Z0-9_]{3}))|_{8})\.SEN3$
      # Filename regex for ignoring files
      ignoreRegex: (^\..*|.*\.tmp$|db.*|^lost\+found$)
      # Kafka topic to put the ingestion jobs for the worker
      topic: t-pdgs-ingestion-jobs-auxip-nominal
      # Product family accociated with the file to be ingested
      family: S3_AUX
      # Name of the station (4-letter code)
      stationName: PRIP
      # Mission-ID in upper case (S1,S2,S3..)
      missionId: S3

# Aux ip configuration
auxip:
  # The publication date of the products to start with querying an inbox that wasn't queried before (= has no auxipState mongo entry)
  start: {{ .Values.auxip.start }}
  # The duration of the time window for the query, beginning from where it left of in previous polls or from start if the inbox wasn't queried before
  time-window-sec: {{ .Values.auxip.timeWindowSec }}
  # The overlapping of time windows in seconds, for safety, keep small
  time-window-overlap-sec: {{ .Values.auxip.timeWindowOverlapSec }}
  # The offset from now in seconds, so that the provider (PRIP) has some time to publish new products, otherwise they might not be seen from AUXIP
  offset-from-now-sec: {{ .Values.auxip.offsetFromNowSec }}
  # Maximum page size for a time window request, limiting the size of a single request (many small requests vs few big requests)
  max-page-size: {{ .Values.auxip.maxPageSize }}

# Kafka
kafka:
  # host:port to use for establishing the initial connection to the Kafka cluster
  bootstrap-servers: ${kafka_bootstrap-servers}
  # Hostname
  hostname: ${HOSTNAME}
  # Topic name for the errors
  error-topic: ${kafka_topic_errors}
  # Kafka Producer config
  producer:
    # When greater than zero, enables retrying of failed sends
    max-retries: 10

# MongoDB
mongodb:
  # Host
  host: ${mongo_db_host:localhost}
  # Port
  port: ${mongo_db_port:27017}
  # SID
  database: ${mongo_db_database:s1pdgs}

# Status
status:
  # (Fixed delay) Period in milliseconds between 2 check if application shall be stopped or not
  delete-fixed-delay-ms: 3000             
  # The number of consecutive processing errors leading to the state FATALERROR
  max-error-counter-processing: 3         
  # The number of consecutive MQI errors leading to the state FATALERROR
  max-error-counter-mqi: 30  
   # Timeout after 10 minutes of no polling attempt --> AppStatus -> FAIL             
  fail-after-inactivity-for-seconds: 200 
