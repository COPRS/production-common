#TODO: figure out why I need this here and in bootstrap.yml
spring:
  main:
    banner-mode: "off"
  application:
    name: s1pdgs-applicative-catalog
    
# Logging
logging:
  config: ${log4j_config:log/log4j2.yml}
  
# MongoDB
mongodb:
  host: ${mongo_db_host:localhost}
  port: ${mongo_db_port:27017}
  database: ${mongo_db_database:s1pdgs}
  # Millisecond after an entry is considered old and is cleaned from the database
  #old-entry-ms: ${appcatalog_mongodb_old_entry_ms:864000000}
  old-entry-ms: ${appcatalog_mongodb_old_entry_ms:{{ .Values.appCatalog.mqi.cleaningOld }}}
  # Schedule for the coronjob to clean old entries
  clean-cron: ${appcatalog_mongodb_clean_cron:0 0 0 * * *}
  
#MQI
mqi:
  # Number of retries until an mqi message is set to ACK_KO when updated multiple times
  max-retries: ${appcatalog_mqi_max_retries:45}
  # Default offset to be returned when no message is present and earliestOffset is requested
  dft-offset: -3

# Application status configuration
status:
  # (fixed delay) period in milliseconds between 2 check if application shall be stopped or not, default is 3000
  delete-fixed-delay-ms: 3000
  # The number of consecutive MQI errors leading to the state FATALERROR, default is 100
  max-error-counter-mqi: 3
  # seem to be deprecated and not used
  max-error-counter-job: 3

# App Catalog configuration
jobs:
  # Execution rate for deletion of terminated app data jobs
  cleaning-jobs-terminated-fixed-rate-ms: {{ .Values.appCatalog.jobs.cleaningJobsTerminatedFixedRateMs }}
  # Execution rate for deletion of timed out app data jobs with state (WAITING, DISPATCHING or GENERATING)
  cleaning-jobs-invalid-fixed-rate-ms: {{ .Values.appCatalog.jobs.cleaningJobsInvalidFixedRateMs }}
  # Timeout and error count configuration for each product category
  edrs-sessions:
    # Product category
    max-age-job-ms:
      # Timeout for app data jobs in state WAITING before deletion
      waiting: {{ .Values.appCatalog.jobs.edrsSessions.maxAgeJobMs.waiting }}
      # Timeout for app data jobs in state DISPATCHING before deletion
      dispatching: {{ .Values.appCatalog.jobs.edrsSessions.maxAgeJobMs.dispatching }}
      # Timeout for app data jobs in state GENERATING before deletion
      generating: {{ .Values.appCatalog.jobs.edrsSessions.maxAgeJobMs.generating }}
      # Timeout for app data jobs in state TERMINATED before deletion
      terminated: {{ .Values.appCatalog.jobs.edrsSessions.maxAgeJobMs.terminated }}
  level-segments:
    max-age-job-ms:
      waiting: {{ .Values.appCatalog.jobs.levelSegments.maxAgeJobMs.waiting }}
      dispatching: {{ .Values.appCatalog.jobs.levelSegments.maxAgeJobMs.dispatching }}
      generating: {{ .Values.appCatalog.jobs.levelSegments.maxAgeJobMs.generating }}
      terminated: {{ .Values.appCatalog.jobs.levelSegments.maxAgeJobMs.terminated }}
  level-products:
    max-age-job-ms:
      waiting: {{ .Values.appCatalog.jobs.levelProducts.maxAgeJobMs.waiting }}
      dispatching: {{ .Values.appCatalog.jobs.levelProducts.maxAgeJobMs.dispatching }}
      generating: {{ .Values.appCatalog.jobs.levelProducts.maxAgeJobMs.generating }}
      terminated: {{ .Values.appCatalog.jobs.levelProducts.maxAgeJobMs.terminated }}
