# Client configuration
obs.swift.user.name = ${env:obs_swift_user_name}
obs.swift.user.password = ${env:obs_swift_password}
obs.swift.tenant.id = ${env:obs_swift_tenant_id}
obs.swift.tenant.name = ${env:obs_swift_tenant_name}
obs.swift.auth-url = ${env:obs_swift_auth_url}
obs.swift.authentication-method = ${env:obs_swift_authentication_method}
obs.swift.region.name = ${env:obs_swift_region_name}

# Transfer manager configuration
# Default size threshold for when to use multipart uploads: default 16 * MB (1024 * 1024)
transfer.manager.multipart-upload-threshold-mb = ${env:transfer-manager_multipart-upload-threshold-mb}
#Default minimum part size for upload parts: default 5 * MB (1024 * 1024)
transfer.manager.minimum-upload-part-size-mb = ${env:transfer-manager_minimum-upload-part-size-mb}

# Retry policy
# Condition: attempted retries < max number of retries
# Backoff: if non-throttled exception => FullJitterBackoffStrategy; else => EqualJitterBackoffStrategy
retry-policy.condition.max-retries = ${env:storage_retry-policy_condition_max-retries}
# base sleep time (milliseconds) for non-throttled exceptions.
retry-policy.backoff.base-delay-ms = ${env:storage_retry-policy_backoff_base-delay-ms}
# base sleep time (milliseconds) for throttled exceptions.
retry-policy.backoff.throttled-base-delay-ms = ${env:storage_retry-policy_backoff_throttled-base-delay-ms} 
# maximum back-off time before retrying a request
retry-policy.backoff.max-backoff-ms = ${env:storage_retry-policy_backoff_max-backoff-ms} 

# Bucket configuration
bucket.auxiliary-files = ${env:storage_buckets_auxiliary-files}
bucket.edrs-sessions = ${env:storage_buckets_session-files}

bucket.l0-slices = ${env:storage_buckets_l0-slices}
bucket.l0-acns = ${env:storage_buckets_l0-acns}
bucket.l0-segments = ${env:storage_buckets_l0-segments}
bucket.l0-blanks = ${env:storage_buckets_l0-blanks}

bucket.l1-slices = ${env:storage_buckets_l1-slices}
bucket.l1-acns = ${env:storage_buckets_l1-acns}

bucket.l2-slices = ${env:storage_buckets_l2-slices}
bucket.l2-acns = ${env:storage_buckets_l2-acns}

bucket.auxiliary-files-zip = ${env:storage_buckets_auxiliary-files-zip}
bucket.l0-slices-zip = ${env:storage_buckets_l0-slices-zip}
bucket.l0-acns-zip = ${env:storage_buckets_l0-acns-zip}
bucket.l0-segments-zip = ${env:storage_buckets_l0-segments-zip}
bucket.l0-blanks-zip = ${env:storage_buckets_l0-blanks-zip}
bucket.l1-slices-zip = ${env:storage_buckets_l1-slices-zip}
bucket.l1-acns-zip = ${env:storage_buckets_l1-acns-zip}
bucket.l2-slices-zip = ${env:storage_buckets_l2-slices-zip}
bucket.l2-acns-zip = ${env:storage_buckets_l2-acns-zip}

bucket.invalid = ${env:storage_buckets_invalid}

# Timeout configuration
timeout-s.shutdown = ${env:storage_timeout-s_shutdown}
timeout-s.down-exec = ${env:storage_timeout-s_down-exec}
timeout-s.up-exec = ${env:storage_timeout-s_up-exec}