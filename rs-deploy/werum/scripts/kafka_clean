#!/bin/bash

if [ $# -ne 1 ]; then
  echo -e "Synopsis: TOPIC"; exit 1;
fi

TOPIC=$1
lcl_REPLICA=$(kubectl -n ${KAFKA_NAMESPACE} get statefulset kafka -o jsonpath='{.spec.replicas}')
lcl_TO_INIT=1

LIST_QUEUES_SCRIPT=$ENV_DIR/wrapper/kafka.sh
. $LIST_QUEUES_SCRIPT
for line in ${TOPIC_LIST_DETAILS[@]};
do
    current_name=$(     echo "${line}" | awk -F ':' '{print $1}');
    if [ "$current_name" == "$TOPIC" ]; then
        lcl_TOPIC_NAME=$(     echo "${line}" | awk -F ':' '{print $1}');
        lcl_TOPIC_PART=$(     echo "${line}" | awk -F ':' '{print $2}');
        lcl_TOPIC_RETENTION=$(echo "${line}" | awk -F ':' '{print $3}');
    fi
done

if [ -z "$lcl_TOPIC_RETENTION" ]; then
    echo No configuration for topic $TOPIC found
    exit
fi

echo Now cleaning and initializing topic $lcl_TOPIC_NAME with $lcl_TOPIC_PART partitions and $lcl_TOPIC_RETENTION retention

RED='\033[0;31m'
ORANGE='\033[0;33m'
GREEN='\033[0;32m'
PURPLE='\033[0;35m'
NC='\033[0m'


TOPIC_DELETE_1=$(kubectl -n "${KAFKA_NAMESPACE}" exec -ti ${KAFKA_POD} -c ${KAFKA_CONTAINER} -- sh ${KAFKA_SCRIPT_TOPIC} --delete --topic ${lcl_TOPIC_NAME} --zookeeper ${ZOOKEEPER_LIST} >/dev/null 2>&1);
TOPIC_DELETE_2=$(kubectl -n "${KAFKA_NAMESPACE}" exec -ti zookeeper-0 -c zookeeper -- sh -c "echo \"deleteall /brokers/topics/${lcl_TOPIC_NAME}\"      | /etc/zookeeper/bin/zkCli.sh" >/dev/null 2>&1);
TOPIC_DELETE_3=$(kubectl -n "${KAFKA_NAMESPACE}" exec -ti zookeeper-0 -c zookeeper -- sh -c "echo \"deleteall /admin/delete_topics/${lcl_TOPIC_NAME}\" | /etc/zookeeper/bin/zkCli.sh" >/dev/null 2>&1);
lcl_CHECK_DELETE=$(kubectl -n "${KAFKA_NAMESPACE}" exec -ti ${KAFKA_POD} -c ${KAFKA_CONTAINER} -- sh ${KAFKA_SCRIPT_TOPIC} --describe --topic ${lcl_TOPIC_NAME} --zookeeper ${ZOOKEEPER_LIST} | grep "does not exist" | head -1 | wc -l); # TODO: grep returns with exit code 1 which is in the output then and can irritate... this could be fixed later
if [ ${lcl_CHECK_DELETE} -eq 1 ];
then
    lcl_TO_INIT=1;
    echo -e "${ORANGE}OK${NC} : topic ${lcl_TOPIC_NAME} (current partition = ${lcl_CURRENT_PART}) has been deleted. (does not exist = ${lcl_CHECK_DELETE})";
    DELETE_STATUS="${ORANGE} DELETED ${NC}";
else
    echo -e "${RED}KO${NC} : topic ${lcl_TOPIC_NAME} (current partition = ${lcl_CURRENT_PART}) has not been deleted. (does not exist = ${lcl_CHECK_DELETE})";
    DELETE_STATUS="${RED} NOT DELETED ${NC}";
fi;

# Initialization
if [ ${lcl_TO_INIT} -eq 1 ];
then
    TOPIC_INIT=$(kubectl -n "${KAFKA_NAMESPACE}" exec -ti ${KAFKA_POD} -c ${KAFKA_CONTAINER} -- sh ${KAFKA_SCRIPT_TOPIC} --create --topic ${lcl_TOPIC_NAME} --zookeeper ${ZOOKEEPER_LIST} --replication-factor ${lcl_REPLICA} --partitions ${lcl_TOPIC_PART} >/dev/null 2>&1);
    TOPIC_ALTER=$(kubectl -n ${KAFKA_NAMESPACE} exec -ti ${KAFKA_POD} -c ${KAFKA_CONTAINER} -- bash ${KAFKA_SCRIPT_CONFIG} --zookeeper ${ZOOKEEPER_LIST} --alter --entity-type topics --entity-name ${lcl_TOPIC_NAME} --add-config retention.ms=${lcl_TOPIC_RETENTION} >/dev/null 2>&1 | grep -v OpenJDK);

    # New check
    lcl_CHECK=$(kubectl -n "${KAFKA_NAMESPACE}" exec -ti ${KAFKA_POD} -c ${KAFKA_CONTAINER} -- sh ${KAFKA_SCRIPT_TOPIC} --describe --topic ${lcl_TOPIC_NAME} --zookeeper ${ZOOKEEPER_LIST} | sed 's/ //g');
    lcl_NEW_PART=$(     echo "${lcl_CHECK}" | grep PartitionCount | awk -F ' ' '{print $2}' | awk 'BEGIN {FS = ":"}{print $2}');
    lcl_NEW_RETENTION=$(echo "${lcl_CHECK}" | grep PartitionCount | awk -F ' ' '{print $4}' | tr '\r' '=' | awk -F '=' '{print $2}');

    # VERIFICATION
    if [ "${lcl_NEW_PART}" == "${lcl_TOPIC_PART}" ] && [ "${lcl_NEW_RETENTION}" == "${lcl_TOPIC_RETENTION}" ];
    then
        echo -e "${GREEN}OK${NC} : topic ${lcl_TOPIC_NAME} has been initialized => ${lcl_TOPIC_PART} (${lcl_TOPIC_PART}) partitions and ${lcl_NEW_RETENTION}ms (${lcl_TOPIC_RETENTION}ms) retention.";
        INIT_STATUS="${GREEN} INITIALIZED ${NC} => ${lcl_TOPIC_PART} (${lcl_TOPIC_PART}) partitions and ${lcl_NEW_RETENTION}ms (${lcl_TOPIC_RETENTION}ms) retention.";
    else
        echo -e "${RED}KO${NC} : topic ${lcl_TOPIC_NAME} has not been initialized => ${lcl_TOPIC_PART} (${lcl_TOPIC_PART}) partitions and ${lcl_NEW_RETENTION}ms (${lcl_TOPIC_RETENTION}ms) retention.";
        INIT_STATUS="${RED} NOT INITIALIZED ${NC} => ${lcl_TOPIC_PART} (${lcl_TOPIC_PART}) partitions and ${lcl_NEW_RETENTION}ms (${lcl_TOPIC_RETENTION}ms) retention.";
    fi;
fi;
    
RESULT="${RESULT}
${lcl_TOPIC_NAME} | ${DELETE_STATUS} | ${INIT_STATUS}";

echo -e "${RESULT}" | column -t -s '|';
